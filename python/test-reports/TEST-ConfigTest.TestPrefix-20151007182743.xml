<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="1" failures="0" name="ConfigTest.TestPrefix-20151007182743" tests="2" time="0.060">
	<properties/>
	<system-out>
<![CDATA[]]>	</system-out>
	<system-err>
<![CDATA[]]>	</system-err>
	<testcase classname="ConfigTest.TestPrefix" name="test_initial_config" time="0.024"/>
	<testcase classname="ConfigTest.TestPrefix" name="test_sensor_prefix_split" time="0.036">
		<error message="key IPv4Network('10.0.18.0/24') is not a string" type="TypeError">
<![CDATA[Traceback (most recent call last):
  File "/home/saikappa/workspace/SciPass/python/t/ConfigTest.py", line 52, in test_sensor_prefix_split
    self.api.getBalancer("%016x" % self.datapath.id, "R&E").splitSensorPrefix("group1",ipaddr.IPv4Network("10.0.18.0/24"))
  File "./SimpleBalancer.py", line 522, in splitSensorPrefix
    self.addGroupPrefix(group, prefix, prefixBw)
  File "./SimpleBalancer.py", line 474, in addGroupPrefix
    self.fireSaveState()
  File "./SimpleBalancer.py", line 397, in fireSaveState
    handler(self.groups, self.prefix_list, self.splitPrefixes)
  File "./SciPass.py", line 474, in <lambda>
    splitPrefixes = z
  File "./SciPass.py", line 1074, in saveState
    json.dump([curr_state], fd)
  File "/usr/lib64/python2.6/json/__init__.py", line 180, in dump
    for chunk in iterable:
  File "/usr/lib64/python2.6/json/encoder.py", line 306, in _iterencode
    for chunk in self._iterencode_list(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 204, in _iterencode_list
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 275, in _iterencode_dict
    for chunk in self._iterencode(value, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 309, in _iterencode
    for chunk in self._iterencode_dict(o, markers):
  File "/usr/lib64/python2.6/json/encoder.py", line 268, in _iterencode_dict
    raise TypeError("key {0!r} is not a string".format(key))
TypeError: key IPv4Network('10.0.18.0/24') is not a string
]]>		</error>
	</testcase>
</testsuite>
